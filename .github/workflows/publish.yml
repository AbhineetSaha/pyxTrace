# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Upload Python Package

on:
  release:
    types:
      - published

jobs:
  pypi:
    name: upload release to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: deps
        run: python -m pip install -U build

      - name: build
        run: python -m build

      - name: mint API token
        id: mint-token
        run: |
            # Retrieve the ambient OIDC token
            resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
              "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
            echo "OIDC token response: $resp" # Add this line for debugging
            oidc_token=$(jq -r '.value' <<< "${resp}")
            
            # Exchange the OIDC token for an API token
            resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
            echo "API token response: $resp" # Add this line for debugging
            api_token=$(jq -r '.token' <<< "${resp}")

            # Mask the newly minted API token, so that we don't accidentally leak it
            echo "::add-mask::${api_token}"

            # Set the API token as an output
            echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"


      - name: publish
        # gh-action-pypi-publish uses TWINE_PASSWORD automatically
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
