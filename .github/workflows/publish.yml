# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Upload Python Package

on:
  release:
    types:
      - published

jobs:
  pypi:
    name: upload release to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: deps
        run: python -m pip install -U build

      - name: build
        run: python -m build

     # ------------------------------------------------------------
    # 5) Mint a temporary PyPI API-token via OIDC
    # ------------------------------------------------------------
    - name: mint API token
      id: mint-token
      shell: bash
      run: |
        set -euo pipefail

        echo "ðŸ”‘  Requesting OIDC token from GitHubâ€¦"
        oidc_json=$(curl --fail --silent --show-error \
          -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")

        oidc_token=$(jq -r '.value' <<<"$oidc_json")
        if [[ -z "$oidc_token" || "$oidc_token" == "null" ]]; then
          echo "::error::GitHub did not return an OIDC token"
          exit 1
        fi

        echo "ðŸ’³  Exchanging OIDC token for short-lived PyPI API tokenâ€¦"
        api_json=$(curl --fail --silent --show-error \
          -H "Content-Type: application/json" \
          -X POST https://pypi.org/_/oidc/mint-token \
          -d "$(printf '{"token":"%s"}' "$oidc_token")")

        api_token=$(jq -r '.token' <<<"$api_json")
        if [[ -z "$api_token" || "$api_token" == "null" ]]; then
          echo "::error::PyPI did not issue an API token"
          echo "Response was: $api_json"
          exit 1
        fi

        # Hide the token from logs
        echo "::add-mask::$api_token"

        # Make it available to subsequent steps
        echo "api-token=$api_token" >> "$GITHUB_OUTPUT"
        
        echo "âœ…  Received short-lived API token from PyPI"


      - name: publish
        # gh-action-pypi-publish uses TWINE_PASSWORD automatically
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
